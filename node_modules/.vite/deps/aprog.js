var __defProp = Object.defineProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);

// node_modules/aprog/src/aprog.js
var pause = (variable) => {
  if (isNumber(variable)) {
    return new Promise((resolve) => setTimeout(resolve, variable));
  } else {
    return new Promise((resolve) => {
      const checkVariable = () => {
        if (variable()) {
          resolve();
        } else {
          setTimeout(checkVariable, 100);
        }
      };
      checkVariable();
    });
  }
};
var date = (format, timestamp = Date.now()) => {
  const date2 = new Date(timestamp);
  const map = {
    Y: date2.getFullYear(),
    m: String(date2.getMonth() + 1).padStart(2, "0"),
    d: String(date2.getDate()).padStart(2, "0"),
    H: String(date2.getHours()).padStart(2, "0"),
    i: String(date2.getMinutes()).padStart(2, "0"),
    s: String(date2.getSeconds()).padStart(2, "0")
  };
  return format.replace(/[YmdHis]/g, (match) => map[match]);
};
var chars = (word) => {
  const cyrillicToLatin = {
    "А": "A",
    "Б": "B",
    "В": "V",
    "Г": "H",
    "Д": "D",
    "Е": "E",
    "Є": "Ye",
    "Ж": "Zh",
    "З": "Z",
    "И": "Y",
    "І": "I",
    "Ї": "Yi",
    "Й": "Y",
    "К": "K",
    "Л": "L",
    "М": "M",
    "Н": "N",
    "О": "O",
    "П": "P",
    "Р": "R",
    "С": "S",
    "Т": "T",
    "У": "U",
    "Ф": "F",
    "Х": "Kh",
    "Ц": "Ts",
    "Ч": "Ch",
    "Ш": "Sh",
    "Щ": "Shch",
    "Ю": "Yu",
    "Я": "Ya",
    "а": "a",
    "б": "b",
    "в": "v",
    "г": "h",
    "д": "d",
    "е": "e",
    "є": "ye",
    "ж": "zh",
    "з": "z",
    "и": "y",
    "і": "i",
    "ї": "yi",
    "й": "y",
    "к": "k",
    "л": "l",
    "м": "m",
    "н": "n",
    "о": "o",
    "п": "p",
    "р": "r",
    "с": "s",
    "т": "t",
    "у": "u",
    "ф": "f",
    "х": "kh",
    "ц": "ts",
    "ч": "ch",
    "ш": "sh",
    "щ": "shch",
    "ю": "yu",
    "я": "ya",
    "Ь": "",
    "ь": "",
    "Ъ": "",
    "ъ": "",
    "Э": "E",
    "э": "e",
    "Ы": "Y",
    "ы": "y"
  };
  return word.split("").map((char) => cyrillicToLatin[char] || char).join("");
};
var isArray = (value) => {
  return Object.prototype.toString.call(value) === "[object Array]";
};
var isObject = (value) => {
  return Object.prototype.toString.call(value) === "[object Object]";
};
var isPromise = (value) => {
  return Object.prototype.toString.call(value) === "[object Promise]" || typeof value === "object" && value !== null && typeof value.then === "function" && typeof value.catch === "function";
};
var isNumber = (value) => {
  return typeof value === "number" && !Number.isNaN(value);
};
var isNumeric = (value) => {
  return /^-?\d+(\.\d+)?$/.test(value);
};
var isFloat = (value) => {
  return !isNaN(value) && Number(value) === value && !Number.isInteger(value);
};
var isString = (value) => {
  return typeof value === "string";
};
var isNull = (value) => {
  return value === null || value === void 0;
};
var isHtmlElement = (value) => {
  const htmlElements = [
    "HTMLDivElement",
    "HTMLAnchorElement",
    "HTMLSpanElement",
    "HTMLButtonElement",
    "HTMLSelectElement",
    "HTMLMainElement",
    "HTMLInputElement",
    "HTMLUlElement",
    "Promise",
    "HTMLListElement",
    "HTMLLabelElement",
    "HTMLTableCaptionElement",
    "HTMLHRElement",
    "SVGSVGElement",
    "HTMLPreElement",
    "Promise",
    "HTMLTextAreaElement",
    "HTMLTableElement",
    "HTMLTHeaderElement",
    "HTMLTBodyElement",
    "HTMLTRElement",
    "HTMLTHElement",
    "HTMLTDElement",
    "HTMLTableSectionElement",
    "HTMLTableRowElement",
    "HTMLTableCellElement",
    "HTMLImageElement",
    "HTMLSectionElement"
  ];
  return htmlElements.some((element) => {
    return Object.prototype.toString.call(value) === `[object ${element}]`;
  });
};
var isEmpty = (variable) => {
  if (variable === void 0 || variable === null) {
    return true;
  }
  if (typeof variable === "string" && variable.trim() === "") {
    return true;
  }
  if (Array.isArray(variable) && variable.length === 0) {
    return true;
  }
  if (typeof variable === "object" && !Array.isArray(variable) && Object.keys(variable).length === 0) {
    return true;
  }
  if (typeof variable === "number" && variable === 0) {
    return false;
  }
  return !variable;
};
var elementToObject = (element) => {
  const obj = {};
  for (let attr of element.attributes) {
    obj[attr.name] = attr.value;
  }
  if (element.tagName.toLowerCase() === "input") {
    obj["inputValue"] = element.value;
  } else if (element.tagName.toLowerCase() === "select") {
    obj["selectValue"] = element.value;
  }
  return obj;
};
var nodeListToObject = (nodeList) => {
  return Array.from(nodeList).map((el, index) => ({
    ...el.id && { id: el.id },
    ...el.classList && { classList: [...el.classList] },
    ...el.name && { name: el.name },
    ...el.tagName && { element: el.tagName.toLowerCase() },
    ...el.children && { children: [...nodeListToObject(el.children)] },
    ...el.attributes && { attributes: Array.from(el.attributes).reduce((acc, attr) => {
      acc[attr.name] = attr.value;
      return acc;
    }, {}) },
    ...el.value && { value: el.value },
    ...el.innerText && { value: el.innerText },
    index
  }));
};
var deepEqual = (obj1, obj2) => {
  if (obj1 === obj2) return true;
  if (obj1 == null || obj2 == null) return false;
  if (typeof obj1 !== "object" || typeof obj2 !== "object") return false;
  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);
  if (keys1.length !== keys2.length) return false;
  for (const key of keys1) {
    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {
      return false;
    }
  }
  return true;
};
var ucfirst = (str) => {
  if (!str) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};
var firstKey = (object) => {
  return Object.keys(object)[0] || null;
};
var copyText = async (element) => {
  try {
    const textToCopy = isHtmlElement(element) ? JSON.stringify(JSON.parse(element.innerText)) : element;
    await navigator.clipboard.writeText(textToCopy);
    console.log("Скопійовано");
  } catch (err) {
    console.error("Помилка копіювання! Error:", err);
  }
};
var options = (object, selected = null, disabled = null) => {
  if (isObject(object)) {
    return Object.entries(object).map(([key, value]) => {
      key = isNumeric(key) ? parseFloat(key) : key;
      return {
        value: key,
        name: value,
        selected: key === selected,
        disabled: key === disabled
      };
    });
  } else {
    return object.map((value, index) => {
      if (isObject(value)) {
        return Object.entries(value).map(([key, value2]) => {
          key = isNumeric(key) ? parseFloat(key) : key;
          return {
            value: key,
            name: value2,
            selected: key === selected,
            disabled: key === disabled
          };
        });
      } else {
        return {
          value,
          name: value,
          selected: value === selected,
          disabled: value === disabled
        };
      }
    });
  }
};
var input = (attributes = {}) => {
  let input2 = document.createElement("input");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        input2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "type":
            input2.type = String(attrValue);
            break;
          case "class":
            input2.className = String(attrValue);
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  input2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  input2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          case "disabled":
            input2.disabled = attrValue;
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              input2.setAttribute(kebabName, String(attrValue));
            } else {
              input2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return input2;
};
var label = (attributes = {}) => {
  let label2 = document.createElement("label");
  label2.setAttribute("for", "...");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        label2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            label2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? label2.appendChild(element) : label2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? label2.appendChild(attrValue) : label2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  label2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  label2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              label2.setAttribute(kebabName, String(attrValue));
            } else {
              label2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return label2;
};
var form = (attributes = {}) => {
  let form2 = document.createElement("form");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        form2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            form2.className = String(attrValue);
            break;
          case "action":
            form2.action = String(attrValue);
            break;
          case "method":
            form2.method = String(attrValue);
            break;
          case "enctype":
            form2.enctype = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? form2.append(element) : form2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? form2.append(attrValue) : form2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  form2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  form2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              form2.setAttribute(kebabName, String(attrValue));
            } else {
              form2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return form2;
};
var div = (attributes = {}) => {
  let div2 = document.createElement("div");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        div2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            div2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? div2.append(element) : div2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? div2.append(attrValue) : div2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  div2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  div2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              div2.setAttribute(kebabName, String(attrValue));
            } else {
              div2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return div2;
};
var a = (attributes = {}) => {
  let a2 = document.createElement("a");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        a2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            a2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? a2.append(element) : a2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? a2.append(attrValue) : a2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  a2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  a2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              a2.setAttribute(kebabName, String(attrValue));
            } else {
              a2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return a2;
};
var span = (attributes = {}) => {
  let span2 = document.createElement("span");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        span2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            span2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? span2.append(element) : span2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? span2.append(attrValue) : span2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  span2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  span2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              span2.setAttribute(kebabName, String(attrValue));
            } else {
              span2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return span2;
};
var textarea = (attributes = {}) => {
  let textarea2 = document.createElement("textarea");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        textarea2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            textarea2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? textarea2.appendChild(element) : textarea2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? textarea2.appendChild(attrValue) : textarea2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  textarea2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  textarea2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              textarea2.setAttribute(kebabName, String(attrValue));
            } else {
              textarea2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return textarea2;
};
var pre = (attributes = {}) => {
  let pre2 = document.createElement("pre");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        pre2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            pre2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? pre2.appendChild(element) : pre2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? pre2.appendChild(attrValue) : pre2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  pre2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  pre2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              pre2.setAttribute(kebabName, String(attrValue));
            } else {
              pre2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return pre2;
};
var button = (attributes = {}) => {
  let button2 = document.createElement("button");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        button2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            button2.className = String(attrValue);
            break;
          case "type":
            button2.type = String(attrValue);
            break;
          case "value":
            button2.innerHTML = String(attrValue);
            break;
          case "disabled":
            button2.disabled = attrValue;
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  button2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  button2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              button2.setAttribute(kebabName, String(attrValue));
            } else {
              button2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return button2;
};
var select = (attributes = {}) => {
  let select2 = document.createElement("select");
  let option2 = document.createElement("option");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        select2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            select2.className = String(attrValue);
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  select2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  select2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          case "option":
            Object.entries(attrValue).forEach(([optionName, optionValue]) => {
              switch (optionName) {
                case "value":
                  option2.setAttribute("value", String(optionValue));
                  break;
                case "name":
                  option2.innerHTML = String(optionValue);
                  break;
                case "selected":
                  option2.selected = true;
                  break;
                case "disabled":
                  option2.disabled = true;
                  break;
              }
            });
            select2.appendChild(option2);
            break;
          case "options":
            attrValue.forEach((opt) => {
              let customOption = document.createElement("option");
              Object.entries(opt).forEach(([optionName, optionValue]) => {
                switch (optionName) {
                  case "value":
                    customOption.value = String(optionValue);
                    break;
                  case "name":
                    customOption.innerHTML = String(optionValue);
                    break;
                  case "selected":
                    customOption.selected = Boolean(optionValue);
                    break;
                  case "disabled":
                    customOption.disabled = Boolean(optionValue);
                    break;
                }
              });
              select2.appendChild(customOption);
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              select2.setAttribute(kebabName, String(attrValue));
            } else {
              select2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return select2;
};
var option = (attributes = {}) => {
  let option2 = document.createElement("option");
  if (attributes) {
    Object.entries(attributes).forEach(([optionName, optionValue]) => {
      switch (optionName) {
        case "value":
          option2.value = optionValue;
          break;
        case "name":
          option2.textContent = optionValue;
          break;
        case "selected":
          option2.selected = !!optionValue;
          break;
        case "disabled":
          option2.disabled = !!optionValue;
          break;
      }
    });
  }
  return option2;
};
var hr = (attributes = {}) => {
  let hr2 = document.createElement("hr");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      switch (name) {
        case "class":
          hr2.className = String(attrValue);
          break;
        case "style":
          Object.entries(attrValue).forEach(([styleName, styleValue]) => {
            switch (styleName) {
              case "zIndex":
                hr2.style[styleName] = `99999${styleValue}`;
                break;
              default:
                hr2.style[styleName] = styleValue;
                break;
            }
          });
          break;
        default:
          hr2.setAttribute(name, String(attrValue));
      }
    });
  }
  return hr2;
};
var meta = (attributes = {}) => {
  let meta2 = document.createElement("meta");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      switch (name) {
        case "class":
          meta2.className = String(attrValue);
          break;
        case "style":
          Object.entries(attrValue).forEach(([styleName, styleValue]) => {
            switch (styleName) {
              case "zIndex":
                meta2.style[styleName] = `99999${styleValue}`;
                break;
              default:
                meta2.style[styleName] = styleValue;
                break;
            }
          });
          break;
        default:
          meta2.setAttribute(name, String(attrValue));
      }
    });
  }
  return meta2;
};
var table = (attributes = {}) => {
  let table2 = document.createElement("table");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        table2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            table2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? table2.append(element) : table2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? table2.append(attrValue) : table2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  table2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  table2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              table2.setAttribute(kebabName, String(attrValue));
            } else {
              table2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return table2;
};
var caption = (attributes = {}) => {
  let caption2 = document.createElement("caption");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        caption2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "side":
            caption2.style.captionSide = String(attrValue);
            break;
          case "class":
            caption2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? caption2.append(element) : caption2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? caption2.append(attrValue) : caption2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  caption2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  caption2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              caption2.setAttribute(kebabName, String(attrValue));
            } else {
              caption2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return caption2;
};
var thead = (attributes = {}) => {
  let thead2 = document.createElement("thead");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        thead2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            thead2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? thead2.append(element) : thead2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? thead2.append(attrValue) : thead2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  thead2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  thead2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              thead2.setAttribute(kebabName, String(attrValue));
            } else {
              thead2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return thead2;
};
var tbody = (attributes = {}) => {
  let tbody2 = document.createElement("tbody");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        tbody2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            tbody2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? tbody2.append(element) : tbody2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? tbody2.append(attrValue) : tbody2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  tbody2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  tbody2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              tbody2.setAttribute(kebabName, String(attrValue));
            } else {
              tbody2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return tbody2;
};
var tr = (attributes = {}) => {
  let tr2 = document.createElement("tr");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        tr2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            tr2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? tr2.append(element) : tr2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? tr2.append(attrValue) : tr2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  tr2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  tr2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              tr2.setAttribute(kebabName, String(attrValue));
            } else {
              tr2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return tr2;
};
var th = (attributes = {}) => {
  let th2 = document.createElement("th");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        th2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            th2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? th2.append(element) : th2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? th2.append(attrValue) : th2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  th2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  th2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              th2.setAttribute(kebabName, String(attrValue));
            } else {
              th2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return th2;
};
var td = (attributes = {}) => {
  let td2 = document.createElement("td");
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        td2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            td2.className = String(attrValue);
            break;
          case "value":
            if (isArray(attrValue)) {
              attrValue.forEach((element) => {
                isHtmlElement(element) ? td2.append(element) : td2.innerHTML = String(element);
              });
            } else {
              isHtmlElement(attrValue) ? td2.append(attrValue) : td2.innerHTML = String(attrValue);
            }
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  td2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  td2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              td2.setAttribute(kebabName, String(attrValue));
            } else {
              td2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return td2;
};
var img = (attributes = {}) => {
  let img2 = document.createElement("img");
  img2.alt = "img...";
  if (attributes) {
    Object.entries(attributes).forEach(([name, attrValue]) => {
      if ((name.startsWith("on") || name.startsWith("mouse")) && typeof attrValue === "function") {
        const eventType = name.startsWith("mouse") ? name.toLowerCase() : name.slice(2).toLowerCase();
        img2.addEventListener(eventType, attrValue);
      } else {
        switch (name) {
          case "class":
            img2.className = String(attrValue);
            break;
          case "src":
            img2.src = String(attrValue);
            break;
          case "alt":
            img2.alt = String(attrValue);
            break;
          case "style":
            Object.entries(attrValue).forEach(([styleName, styleValue]) => {
              switch (styleName) {
                case "zIndex":
                  img2.style[styleName] = `99999${styleValue}`;
                  break;
                default:
                  img2.style[styleName] = styleValue;
                  break;
              }
            });
            break;
          default:
            if (name.startsWith("data")) {
              const kebabName = name.replace(/^data/, "data").replace(/([A-Z])/g, "-$1").toLowerCase();
              img2.setAttribute(kebabName, String(attrValue));
            } else {
              img2.setAttribute(name, String(attrValue));
            }
        }
      }
    });
  }
  return img2;
};
var apState = (initialValue) => {
  let state = initialValue;
  const getState = () => state;
  const setState = (newValue) => {
    if (typeof newValue === "function") {
      state = newValue(state);
    } else {
      state = newValue;
    }
  };
  return [getState, setState];
};
var apFetch = async (url, params = {}) => {
  const [data, setData] = apState(null);
  const [error, setError] = apState(null);
  const [isLoading, setIsLoading] = apState(false);
  const fetchData = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await fetch(url, params);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const result = await response.json();
      setData(result);
    } catch (err) {
      console.error(err.message);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };
  await fetchData();
  return [data, error, isLoading];
};
var scrollToTop = () => {
  window.scrollTo({
    top: 0,
    behavior: "smooth"
  });
};
var scrollToBottom = () => {
  window.scrollTo({
    top: document.documentElement.scrollHeight,
    behavior: "smooth"
  });
};
var _get = (name, defaulting = null) => {
  let url = new URL(window.location.href);
  let searchParams = new URLSearchParams(url.search);
  if (searchParams.has(name)) {
    return isFloat(searchParams.get(name)) || isNumeric(searchParams.get(name)) ? parseFloat(searchParams.get(name)) : searchParams.get(name);
  }
  return defaulting;
};
var _getAll = () => {
  let url = new URL(window.location.href);
  let searchParams = new URLSearchParams(url.search);
  let params = {};
  searchParams.forEach((value, key) => {
    params[key] = isFloat(value) || isNumeric(value) ? parseFloat(value) : value;
  });
  return params;
};
var GUID = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(char) {
    const random = Math.random() * 16 | 0;
    const value = char === "x" ? random : random & 3 | 8;
    return value.toString(16);
  });
};
var checkArrays = (arr1, arr2, checkAll = false) => {
  const set1 = new Set(arr1);
  if (checkAll) {
    return arr2.every((item) => set1.has(item));
  } else {
    return arr2.some((item) => set1.has(item));
  }
};
var customTitle = (text) => {
  const title = div({
    id: "tooltip",
    style: {
      position: "absolute",
      padding: "6px 10px",
      display: "block",
      fontSize: "10px",
      whiteSpace: "nowrap",
      color: "#ffffff",
      background: "rgba(51, 51, 51, 0.8)",
      borderRadius: "0.5rem",
      boxShadow: "0 3 7 rgba(51, 51, 51, 0.8)",
      pointerEvents: "none",
      zIndex: 1e3
    },
    value: text
  });
  document.body.appendChild(title);
  return title;
};
var attachCustomTitle = (element, text) => {
  let tooltip = element._customTooltip;
  if (!tooltip) {
    tooltip = customTitle(text);
    element._customTooltip = tooltip;
  }
  element.addEventListener("mouseenter", () => {
    tooltip.style.display = "block";
  });
  element.addEventListener("mousemove", (e) => {
    tooltip.style.left = `${e.pageX + 10}px`;
    tooltip.style.top = `${e.pageY + 10}px`;
  });
  element.addEventListener("mouseleave", () => {
    tooltip.style.display = "none";
  });
};

// node_modules/aprog/src/debugger.js
var _consoleDump;
var Debugger = class {
  constructor() {
    __privateAdd(this, _consoleDump, (args) => {
      args.forEach((arg) => {
        const type = typeof arg;
        if (type === "object") {
          console.info(arg);
        } else {
          console.warn(`(%c${type}%c): %c${arg}`, "color: #ff5722;", "color: #007acc;", "color: #333;");
        }
      });
    });
    __publicField(this, "dump", (...args) => {
      console.group("%c🛠️ Dump Output:", "font-weight: bold; color: #043458; font-size: 12px; background-color: #b3c2cc; padding: 4px 16px; border-radius: 4px;");
      console.warn("%cLocation:", "color: #000acc; font-style: italic; font-size: 10px; background-color: #b3c2cc; padding: 4px 8px; border-radius: 4px;");
      __privateGet(this, _consoleDump).call(this, args);
      console.groupEnd();
    });
    __publicField(this, "dd", (...args) => {
      console.group("%c🛠️ Debug Dump Output", "font-weight: bold; color: #043458; font-size: 12px; background-color: #b3c2cc; padding: 4px 16px; border-radius: 4px;");
      __privateGet(this, _consoleDump).call(this, args);
      console.groupEnd();
      debugger;
    });
  }
};
_consoleDump = new WeakMap();
var debuggerClass = new Debugger();
var dump = (...args) => debuggerClass.dump(args);
var dd = (...args) => debuggerClass.dd(args);

// node_modules/aprog/src/redirect.js
var redirect = (url, { newTab = false, replace = false } = {}) => {
  if (newTab) {
    window.open(url, "_blank");
  } else if (replace) {
    window.location.replace(url);
  } else {
    window.location.href = url;
  }
};
var reload = (delaySeconds = 0.7) => setTimeout(() => window.location.reload(), delaySeconds * 1e3);

// node_modules/aprog/src/NotFound.js
var NotFound = (message = "Page Not Found") => {
  return div({
    style,
    value: [
      div({
        style: style2,
        value: "404"
      }),
      div({ value: message })
    ]
  });
};
var style = {
  width: "100%",
  height: "100vh",
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  justifyContent: "center",
  fontSize: "1.875rem"
};
var style2 = {
  fontSize: "3rem",
  fontWeight: "bold",
  color: "#ff2800"
};
var NotFound_default = NotFound;

// node_modules/aprog/src/router.js
var router = async ({ routes, main, message = "Page Not Found" }) => {
  const renderRoute = async () => {
    const routeComponent = await useRoutes(routes, message);
    main.innerHTML = "";
    if (routeComponent) {
      main.appendChild(routeComponent);
    }
  };
  window.addEventListener("popstate", renderRoute);
  await renderRoute();
};
var navigateTo = (path) => {
  window.history.pushState("", "", path);
};
var useRoutes = async (routes, message) => {
  const path = window.location.pathname;
  const matchingRoute = routes.find((route) => route.path === path);
  return matchingRoute ? await matchingRoute.component() : NotFound_default(message);
};

// node_modules/aprog/src/shifrator.js
var Shifrator = class {
  constructor(key = 3) {
    this.key = key;
  }
  encrypt(str) {
    return str.split("").map((char) => String.fromCharCode(char.charCodeAt(0) + this.key)).join("");
  }
  decrypt(encryptedStr) {
    return encryptedStr.split("").map((char) => String.fromCharCode(char.charCodeAt(0) - this.key)).join("");
  }
};
var shifratorClass = new Shifrator();
var encrypt = (str) => shifratorClass.encrypt(str);
var decrypt = (encryptedStr) => shifratorClass.decrypt(encryptedStr);

// node_modules/aprog/src/indexDB.js
var dbName = "aprogDB";
var storeName = "cacheGemini";
var openDB = () => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(dbName, 1);
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains(storeName)) {
        db.createObjectStore(storeName, { keyPath: "id" });
      }
    };
    request.onsuccess = () => resolve(request.result);
    request.onerror = () => reject(request.error);
  });
};
var loadCacheDB = async (name = "gemini") => {
  const db = await openDB();
  return new Promise((resolve, reject) => {
    const tx = db.transaction(storeName, "readonly");
    const store = tx.objectStore(storeName);
    const request = store.get(name);
    request.onsuccess = () => resolve(request.result ? request.result.data : {});
    request.onerror = () => reject(request.error);
  });
};
var saveCacheDB = async (cache, id = "gemini") => {
  try {
    const resolvedCache = await Promise.resolve(cache);
    const db = await openDB();
    const tx = db.transaction(storeName, "readwrite");
    const store = tx.objectStore(storeName);
    await store.put({ id, data: resolvedCache });
    await tx.complete;
  } catch (err) {
    console.error("Failed to save cache:", err);
  }
};

// node_modules/aprog/src/OpenAI.js
var empty = (variable) => {
  if (typeof variable === "object" && !Array.isArray(variable) && Object.keys(variable).length === 0) {
    return true;
  }
  return !variable;
};
var loadCache = async () => {
  const data = await loadCacheDB();
  return !empty(data) ? data : { messages: {} };
};
var gemini = async (content) => {
  var _a, _b, _c, _d, _e;
  let cache = await loadCache();
  if (cache.messages[content]) {
    console.warn("Відповідь знайдена у кеші");
    return cache.messages[content];
  }
  const apiKey = import.meta.env.VITE_GEMINI_KEY;
  const url = `https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
  const response = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      contents: [{ parts: [{ text: content }] }]
    })
  });
  const data = await response.json();
  if (data.error) {
    console.error(data.error.message);
    cache.messages[content] = data.error.message;
    await saveCacheDB(cache);
    return data.error.message;
  }
  const answer = ((_e = (_d = (_c = (_b = (_a = data.candidates) == null ? void 0 : _a[0]) == null ? void 0 : _b.content) == null ? void 0 : _c.parts) == null ? void 0 : _d[0]) == null ? void 0 : _e.text) || null;
  if (answer) {
    cache.messages[content] = answer;
    await saveCacheDB(cache);
  }
  return answer;
};

// node_modules/aprog/src/math.js
var mathInput = (target) => {
  const enter = target.value.includes("=");
  let result = target.value;
  if (enter) {
    const expression = target.value.slice(0, -1);
    try {
      result = new Function(`return ${expression}`)();
    } catch (error) {
      result = target.value;
    }
    target.value = result;
  }
  return result;
};

// node_modules/aprog/src/storage.js
var cookie = {
  get(name) {
    const cookies = document.cookie.split("; ");
    for (let cookie2 of cookies) {
      let [key, value] = cookie2.split("=");
      if (key === name) {
        return decodeURIComponent(value);
      }
    }
    return null;
  },
  set(name, value, days = 7) {
    let expires = "";
    if (days) {
      let date2 = /* @__PURE__ */ new Date();
      date2.setTime(date2.getTime() + days * 24 * 60 * 60 * 1e3);
      expires = "; expires=" + date2.toUTCString();
    }
    document.cookie = name + "=" + encodeURIComponent(value) + expires + "; path=/";
  },
  delete(name) {
    document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
  }
};
var storage = {
  get(key, defaulting = null) {
    return JSON.parse(localStorage.getItem(key)) || defaulting;
  },
  set(key, data) {
    localStorage.setItem(key, JSON.stringify(data));
  },
  delete(key) {
    localStorage.removeItem(key);
  }
};

// node_modules/aprog/src/paginate.js
var paginate = ({ count = 0, currentPage = 1, onPageChange = () => {
}, colors = {} } = {}) => {
  const defaultColors = {
    defaultColor: "#043458",
    backgroundColor: "#ffffff",
    boxShadow: "0 3px 6px 0 rgba(115,73,118, 0.4), 0 3px 6px 0 rgba(115,73,118, 0.39)",
    borderRadius: "0.5rem",
    fontSize: "16px",
    borderWidth: "0.0313rem",
    border: "border: ${theme.borderWidth} solid ${theme.defaultColor};"
  };
  const theme = { ...defaultColors, ...colors };
  const styles = `
        <style>
            .paginate-block {
                width: 100vw;
                padding: 0 20px;
                margin: 20px 0;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 5px;
            }
            .paginate-btn,
            .paginate-dots,
            .paginate-prev,
            .paginate-next {
                padding: 10px 20px;
                font-size: ${theme.fontSize};
                font-weight: 600;
                color: ${theme.defaultColor};
                background: ${theme.backgroundColor};
                ${theme.border}
                border-radius: ${theme.borderRadius};
                cursor: pointer;
                box-shadow: ${theme.boxShadow};
            }
            .paginate-prev,
            .paginate-next {
                font-family: Roboto, serif;
                font-weight: 700;
            }
            .paginate-btn.active {
                background: ${theme.defaultColor};
                color: ${theme.backgroundColor};
            }
            .paginate-btn:disabled,
            .paginate-dots:disabled,
            .paginate-prev:disabled,
            .paginate-next:disabled {
                cursor: not-allowed;
                opacity: 0.5;
            }
            
            /** Counter */
            .counter {
                width: 100%;
                margin: 20px 0;
                padding: 0 20px;
                display: flex;
                align-items: center;
                justify-content: start;
                gap: 20px;
            }
            .counter span {
                padding: 8px 16px;
                border-radius: ${theme.borderRadius};
                box-shadow: ${theme.boxShadow};
                cursor: pointer;
            }
            .counter span.active {
                color: ${theme.backgroundColor};
                background-color: ${theme.defaultColor};
            }
        </style>
    `;
  const generatePageButtons = () => {
    const buttons = [];
    if (count <= 5) {
      for (let i = 1; i <= count; i++) {
        buttons.push(createPageButton(i));
      }
    } else {
      buttons.push(createPageButton(1));
      if (currentPage > 3) {
        buttons.push(createDotsButton());
      }
      for (let i = Math.max(2, currentPage - 1); i <= Math.min(count - 1, currentPage + 1); i++) {
        buttons.push(createPageButton(i));
      }
      if (currentPage < count - 2) {
        buttons.push(createDotsButton());
      }
      buttons.push(createPageButton(count));
    }
    return buttons;
  };
  const createPageButton = (page) => button({
    class: `paginate-btn ${page === currentPage ? "active" : ""}`,
    value: `${page}`,
    onClick: () => onPageChange(page)
  });
  const createDotsButton = () => button({
    class: "paginate-dots",
    disabled: true,
    value: "..."
  });
  const navigateTo2 = (path) => {
    window.history.pushState("", "", path);
  };
  let url = new URL(window.location.href);
  let searchParams = new URLSearchParams(url.search);
  searchParams.set("page", String(currentPage || 1));
  navigateTo2(`${window.location.pathname}?${searchParams.toString()}`);
  return div({
    class: "paginate-block",
    value: [
      [styles],
      button({
        class: "paginate-prev",
        value: "<<<",
        onClick: () => onPageChange(currentPage > 1 ? currentPage - 1 : 1),
        disabled: currentPage === 1 || currentPage === 0
      }),
      ...generatePageButtons(),
      button({
        class: "paginate-next",
        value: ">>>",
        onClick: () => onPageChange(currentPage < count ? currentPage + 1 : count),
        disabled: currentPage === count
      })
    ]
  });
};
var parseData = (data, page) => {
  const pageSize = storage.get("pageSize");
  const totalData = data.length;
  const pages = Math.ceil(totalData / pageSize);
  if (page > pages) {
    page = pages;
  }
  const cutData = data.slice((page - 1) * pageSize, page * pageSize);
  return [pages, cutData, page, totalData];
};
export {
  GUID,
  _get,
  _getAll,
  a,
  apFetch,
  apState,
  attachCustomTitle,
  button,
  caption,
  chars,
  checkArrays,
  cookie,
  copyText,
  date,
  dd,
  decrypt,
  deepEqual,
  div,
  dump,
  elementToObject,
  encrypt,
  firstKey,
  form,
  gemini,
  hr,
  img,
  input,
  isArray,
  isEmpty,
  isFloat,
  isNull,
  isNumber,
  isNumeric,
  isObject,
  isPromise,
  isString,
  label,
  mathInput,
  meta,
  navigateTo,
  nodeListToObject,
  option,
  options,
  paginate,
  parseData,
  pause,
  pre,
  redirect,
  reload,
  router,
  scrollToBottom,
  scrollToTop,
  select,
  span,
  storage,
  table,
  tbody,
  td,
  textarea,
  th,
  thead,
  tr,
  ucfirst
};
//# sourceMappingURL=aprog.js.map
